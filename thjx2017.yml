name: thjx2017
rules_type: turnbased

constant:
  -
    cst_name: MUR_INITIAL_STOCK
    cst_val: 1024
    cst_comment: Initial stock given to each player at the start of a MUR game.
  -
    cst_name: NOSE_XMAX
    cst_val: 1024
    cst_comment: Grid XMAX
  -
    cst_name: NOSE_YMAX
    cst_val: 3
    cst_comment: Grid YMAX
enum:
  -
    enum_name: mur_position
    enum_summary: "Position a player can defend during a phase"
    enum_field:
      - [pos_n, "N"]
      - [pos_o, "O"]
      - [pos_s, "S"]
      - [pos_e, "E"]
      - [pos_invalid, "Invalid position"]
  -
    enum_name: mur_role
    enum_summary: "Role played during a MUR game (attacker or defender)"
    enum_field:
      - [attacker, "Attacker"]
      - [defender, "Defender"]
  -
    enum_name: action_error
    enum_summary: "Errors returned by the actions"
    enum_field:
      - [ok, "The action was performed successfully."]
      - [invalid_argument, "Invalid argument received."]
      - [invalid_nose_player, "Player should not play NOSE."]
      - [wrong_game, "This action cannot be performed during this game."]
      - [lack_resources, "You need more resources to perform this action."]
      - [not_enough_squares_taken, "You need to take more squares."]
      - [already_called, "You cannot call this action multiple times."]

struct:
  -
    str_name: nose_position
    str_summary: "Position on the NOSE grid."
    str_tuple: yes
    str_field:
      - [x, int, "x coordinate (row index)"]
      - [y, int, "y coordinate (column index)"]
  -
    str_name: mur_losses
    str_summary: "losses of a game of NOSE for both roles."
    str_tuple: yes
    str_field:
      - [attacker, int, "The amount lost by the attacker"]
      - [defender, int, "The amount lost by the defender"]

function:

# Actions

  -
    fct_name: play_mur
    fct_summary: Attack or Defend a position with a given amount of stock.
    fct_ret_type: action_error
    fct_action: yes
    fct_arg:
      - [position, mur_position, "Position that should be defended or
                                  attacked."]
      - [amount, int, "Amount of stock used for attacking / defending."]
  -
    fct_name: play_nose
    fct_summary: Remove squares with position >= to the given square.
    fct_ret_type: action_error
    fct_action: yes
    fct_arg:
      - [x, int, "Index of the row containing the chosen square."]
      - [y, int, "Index of the column containing the chosen square."]

# Usual observers

  -
    fct_name: me
    fct_summary: "Your identifier (not always in {0, 1})."
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: opponent
    fct_summary: "Your opponent's identifier (not always in {0, 1})."
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: score
    fct_summary: "The current score of the specified player."
    fct_ret_type: int
    fct_arg:
      - [player, int, "Player identifier."]

# Observers for the whole game

  -
    fct_name: mur_role_of_player
    fct_summary: "MUR role (attacker/defender) of the specified player."
    fct_ret_type: mur_role
    fct_arg:
      - [player, int, "Player identifier."]
  -
    fct_name: mur_stock
    fct_summary: "Current amount of stock remaining for the specified player."
    fct_ret_type: int
    fct_arg:
      - [player, int, "Player identifier."]
  -
    fct_name: mur_compute_stock_loss
    fct_summary: "Amount of stock lost considering the move of the attacker and defender."
    fct_ret_type: mur_losses
    fct_arg:
      - [attacker, mur_position, "The position attacked."]
      - [defender, mur_position, "The position defended."]
      - [atk_amount, int, "The amount of stock used on the attacked position."]
      - [dfd_amount, int, "The amount of stock used on the defended position."]

# Observer for specific phases

  -
    fct_name: mur_last_pos
    fct_summary: "Last MUR position played by the specified player."
    fct_ret_type: mur_position
    fct_arg:
      - [player, int, "Player identifier."]
  -
    fct_name: mur_last_used_stock
    fct_summary: "Last stock amount used by the specified player."
    fct_ret_type: int
    fct_arg:
      - [player, int, "Player identifier."]
  -
    fct_name: nose_last_played_square
    fct_summary: "Position of the last played square in the NOSE game."
    fct_ret_type: nose_position
    fct_arg: []
  -
    fct_name: nose_remaining_squares
    fct_summary: "Number of remaining squares in the NOSE game."
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: nose_squares_to_take
    fct_summary: "Minimum number of squares to take.
                  Returns -1 if the MUR game of the current turn is not over."
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: nose_squares_taken
    fct_summary: "count number of squares taken for a specific move"
    fct_ret_type: int
    fct_arg:
      - [x, int, "Index of the row containing the chosen square."]
      - [y, int, "Index of the column containing the chosen square."]

user_function:
  -
    fct_name: game_init
    fct_summary: "Function called at the start of the game.
                  You can use it to initialize your data structures."
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: mur_turn
    fct_summary: "Function called during a phase (MUR turn).
                  If you never call the ``play_mur`` function or if your call
                  takes too long you will be automatically timed out."
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: mur_end
    fct_summary: "Function called when a MUR game is over."
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: nose_turn
    fct_summary: "Function called during the NOSE turn.
                  If you never call the ``play_nose`` function or if your call
                  take too long you will be automatically timed out."
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: game_end
    fct_summary: "Function called at the end of the game.
                  You can use it to free your data structures."
    fct_ret_type: void
    fct_arg: []
